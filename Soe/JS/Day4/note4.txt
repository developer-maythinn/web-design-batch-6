


Objects
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object

1.Object literal
let user = {     // an object
  name: "John",  // by key "name" store value "John"
  age: 30        // by key "age" store value 30
};

2.By creating instance of Object
let myobj = new Object();
myobj.name = "Apple";
myobj.price = 500;
console.log(myobj);

3.By using an Object constructor
function myfruit(name, price) {
    this.name = name;
    this.price = price;
}
let myObj = new myfruit("Orange", 1000)
console.log(myObj);

4.Nested Objects
let user = {
  name: "John", // by key "name" store value "John"
  age: 30, // by key "age" store value 30
  parent: {
    fatherName: "Steve",
    motherName: "Amelia"
  }
};

To remove a property, we can use delete operator:
delete user.age;

Object with const can be changed
const user = {
  name: "May"
};
user.name = "Khine"; // (*)
alert(user.name); // Khine

Property value shorthand
function makeUser(name, age) {
  return{
    name, // name: name,
    age // age: age
  }
}

let user = makeUser("John", 30);
alert(user.name); // John

Object copying, references
let user = { name: "John" };
let admin = user; // copy the reference

https://javascript.info/object-copy
Comparison by reference
let a = {};
let b = a; // copy the reference
alert( a == b ); // true, both variables reference the same object
alert( a === b ); // true

here two independent objects are not equal, even though both are empty:
let a = {};
let b = {}; // two independent objects
alert( a == b ); // false

We can use any variable to access the object and modify its contents:
let user = { name: 'John' };
let admin = user;
admin.name = 'Pete'; // changed by the "admin" reference
alert(user.name); // 'Pete', changes are seen from the "user" reference

Cloning
let user = {
  name: "John",
  age: 30
};
let clone = {}; // the new empty object
// let's copy all user properties into it
for (let key in user) {
  clone[key] = user[key];
}
// now clone is a fully independent object with the same content
clone.name = "Pete"; // changed the data in it
alert( user.name ); // still John in the original object

**************************************************************

Destructuring assignment
The two most used data structures in JavaScript are Object and Array.

let a, b, rest;
[a, b] = [10, 20];
console.log(a);
// expected output: 10
console.log(b);
// expected output: 20
[a, b, ...rest] = [10, 20, 30, 40, 50];
console.log(rest);
// expected output: Array [30,40,50]

Basic variable assignment
const foo = ['one', 'two', 'three'];
const [red, yellow, green] = foo;
console.log(red); // "one"
console.log(yellow); // "two"
console.log(green); // "three"

**************************************************************  day4 end